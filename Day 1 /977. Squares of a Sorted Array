class Solution {
    //Aproad 1 TC => 0(n*log(n)) & SC => 0(n)
//     public int[] sortedSquares(int[] nums) {
//        int [] ans = new int[nums.length];
//        for(int i=0;i<nums.length;i++){
//            nums[i]=nums[i]*nums[i];
//        }
//       Arrays.sort(nums);
//       for(int k=0;k<nums.length;k++){
//           ans[k]=nums[k];
//       }
//       return ans;
    
//     }
// }
//Approach 2 Two pointers TC =>0(n) & SC => 0(n)
public int [] sortedSquares(int []nums){
    int n = nums.length;
    int [] res= new int [n];
    int left=0;
    int right=n-1;
    int index=n-1;

    while(left<=right){
        int leftSquare = nums[left]*nums[left];
        int rightSquare = nums[right]*nums[right];

        if(leftSquare>rightSquare){
            res[index] = leftSquare;
            left++;
        }
        else {
            res[index]= rightSquare;
            right--;
        }
        index--;
    }
    return res;
}
}
